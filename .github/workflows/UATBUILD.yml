name: AndroidDemoForUATOnly

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build:
    name: Build AAB and APK
    #if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [aab, apk]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('*/.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build ${{ matrix.build_type | title }} for release
        run: |
          if [ "${{ matrix.build_type }}" == "aab" ]; then
            ./gradlew bundleUatRelease
          else
            ./gradlew assembleUatRelease
          fi

      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Extract Version Name
        id: extract-variable
        run: |
          version_name=$(awk -F "\"" '/versionName/ {print $2}' app/build.gradle)
          echo "custom_variable=${version_name}" >> $GITHUB_ENV

      - name: Rename ${{ matrix.build_type | title }} with Timestamp
        run: |
          if [ "${{ matrix.build_type }}" == "aab" ]; then
            mv ./app/build/outputs/bundle/uatRelease/app-uat-release.aab "./app/build/outputs/bundle/uatRelease/app-uat-release_${{ env.custom_variable }}_${{ env.timestamp }}.aab"
          else
            mv ./app/build/outputs/apk/uat/release/uatRelease.apk "./app/build/outputs/apk/uat/release/app-uat-release_${{ env.custom_variable }}_${{ env.timestamp }}.apk"
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Upload ${{ matrix.build_type | title }} to S3
        run: |
          if [ "${{ matrix.build_type }}" == "aab" ]; then
            aws s3 cp "./app/build/outputs/bundle/uatRelease/app-uat-release_${{ env.custom_variable }}_${{ env.timestamp }}.aab" s3://${{ secrets.AWS_S3_BUCKET }}/AAB/
          else
            aws s3 cp "./app/build/outputs/apk/uat/release/app-uat-release_${{ env.custom_variable }}_${{ env.timestamp }}.apk" s3://${{ secrets.AWS_S3_BUCKET }}/APK/
          fi

      - name: Generate Public URL for ${{ matrix.build_type | title }}
        id: get-url
       
