name: AndroidDemoForUATOnly

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  build_aab:
    name: Build AAB
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('*/.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build AAB for release
        run: ./gradlew bundleuatRelease

      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Extract Custom Variable
        id: extract-variable
        run: |
          CUSTOM_VARIABLE=$(awk -F "\"" '/versionName/ {print $2}' app/build.gradle)
          echo "::set-output name=custom-variable::$CUSTOM_VARIABLE"

      - name: Rename AAB with Timestamp
        run: mv ./app/build/outputs/bundle/uatRelease/app-uat-release.aab "./app/build/outputs/bundle/uatRelease/app-uat-release_${{ env.custom_variable }}_${{ env.timestamp }}.aab"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}



      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Upload AAB to S3
        run: |
          aws s3 cp "./app/build/outputs/bundle/uatRelease/app-uat-release_${{ env.custom_variable }}_${{ env.timestamp }}.aab" s3://${{ secrets.AWS_S3_BUCKET }}/AAB/

      - name: Generate Public URL for AAB
        id: get-url
        run: |
          URL=$(aws s3 presign s3://${{ secrets.AWS_S3_BUCKET }}/AAB/app-uat-release_${{ env.custom_variable }}_${{ env.timestamp }}.aab --expires-in 432000 --region ${{ secrets.AWS_REGION }} --endpoint-url https://s3.${{ secrets.AWS_REGION }}.amazonaws.com)
          echo "url=$URL" >> $GITHUB_ENV

      - name: Retrieve Pull Request Comments
        id: pr-comments
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const prComments = comments.map(comment => comment.body).join("\n");
            return prComments;
          result-encoding: string

      - name: Post AAB URL to Slack
        run: |
          COMMENT_LINES=$(echo "${{ steps.pr-comments.outputs.result }}" | grep -oP '^.*$')
          MESSAGE="Download the AAB file version ${{ env.custom_variable }}: <${{ env.url }}|Click Here>"
          if [ -n "$COMMENT_LINES" ]; then
            MESSAGE="${MESSAGE}\nAdditional Notes from PR:\n$COMMENT_LINES"
          fi
          curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "'"$MESSAGE"'"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Post Failure Notification to Slack for AAB
        if: failure()
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "Build failed for AAB! Please check the workflow for details."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
