name: Build UAT AAB APK

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  build_aab:
    name: Build AAB
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('*/.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build AAB for release
        run: ./gradlew bundleuatRelease 

      - name: Generate Timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M%S')"

      - name: Extract Custom Variable
        id: extract-variable
        run: |
          CUSTOM_VARIABLE=$(awk -F "\"" '/versionName/ {print $2}' app/build.gradle)
          echo "::set-output name=custom-variable::$CUSTOM_VARIABLE"
      - name: Rename AAB with Timestamp
        run: mv ./app/build/outputs/bundle/uatRelease/app-uat-release.aab "./app/build/outputs/bundle/uatRelease/app-uat-release_${{ steps.extract-variable.outputs.custom-variable }}_${{ steps.timestamp.outputs.timestamp }}.aab"
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Upload AAB to S3
        run: |
          aws s3 cp ./app/build/outputs/bundle/uatRelease/app-uat-release_${{ steps.extract-variable.outputs.custom-variable }}_${{ steps.timestamp.outputs.timestamp }}.aab s3://${{ secrets.AWS_S3_BUCKET }}/AAB/

      - name: Generate Public URL for AAB
        id: get-url
        run: |
          URL=$(aws s3 presign s3://${{ secrets.AWS_S3_BUCKET }}/AAB/app-uat-release_${{ steps.extract-variable.outputs.custom-variable }}_${{ steps.timestamp.outputs.timestamp }}.aab --expires-in 432000 --region ${{ secrets.AWS_REGION }} --endpoint-url https://s3.${{ secrets.AWS_REGION }}.amazonaws.com)
          echo "::set-output name=url::$URL"

      - name: Fetch PR Comments and Notify via Slack
        run: |
          set -x
          
          function prefail() {
            echo "$1"
            exit 1
          }
      
          # Get PR number and set it as environment variable
          PR_NUMBER=8 # Example, dynamically retrieve if needed
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
      
          # Get PR title and set it as environment variable
          PR_TITLE="Testing01"
          PR_TITLE=$(echo $PR_TITLE | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g')
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
      
          # Get comments from PR and set as environment variable
          COMMENT_BODY_HTML=$(gh api \
            repos/:owner/:repo/issues/$PR_NUMBER/comments \
            -H "Accept: application/vnd.github.VERSION.html+json" \
            | jq -r ".[0].body_html")
          
          [ -z "$COMMENT_BODY_HTML" ] && prefail "comments(html) are blank"
      
          COMMENT_BODY=$(echo "$COMMENT_BODY_HTML" | sed -e 's/\r//g' | sed -e 's/\n/\\n/g')
          [ -z "$COMMENT_BODY" ] && prefail "comments are blank"
      
          echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
          echo "$COMMENT_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
          # Notify via Slack using the lirlia/github-comment-notifier-to-slack action
        uses: lirlia/github-comment-notifier-to-slack@v1.0.0
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          slack-color: '24292f'
          
      - name: Post AAB URL to Slack
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "Download the AAB file version ${{ steps.extract-variable.outputs.custom-variable }}: <${{ steps.get-url.outputs.url }}|Click Here>"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Post Failure Notification to Slack for AAB
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "Build failed for AAB! Please check the workflow for details."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build_apk:
    name: Build APK
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('*/.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build APK for release
        run:  ./gradlew assembleUatRelease

      - name: Generate Timestamp for APK
        id: timestamp-apk
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M%S')"

      - name: Extract Custom Variable for APK
        id: extract-variable-apk
        run: |
          CUSTOM_VARIABLE=$(awk -F "\"" '/versionName/ {print $2}' app/build.gradle)
          echo "::set-output name=custom-variable-apk::$CUSTOM_VARIABLE"
      - name: Rename APK with Timestamp
        run: mv ./app/build/outputs/apk/uat/release/uatRelease* "./app/build/outputs/apk/uat/release/app-uat-release_${{ steps.extract-variable-apk.outputs.custom-variable-apk }}_${{ steps.timestamp-apk.outputs.timestamp }}.apk"
    
      - name: Configure AWS Credentials for APK
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Install AWS CLI for APK
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Upload APK to S3
        run: |
          aws s3 cp ./app/build/outputs/apk/uat/release/app-uat-release_${{ steps.extract-variable-apk.outputs.custom-variable-apk }}_${{ steps.timestamp-apk.outputs.timestamp }}.apk s3://${{ secrets.AWS_S3_BUCKET }}/APK/
      - name: Generate Public URL for APK
        id: get-url-apk
        run: |
          URL=$(aws s3 presign s3://${{ secrets.AWS_S3_BUCKET }}/APK/app-uat-release_${{ steps.extract-variable-apk.outputs.custom-variable-apk }}_${{ steps.timestamp-apk.outputs.timestamp }}.apk --expires-in 432000 --region ${{ secrets.AWS_REGION }} --endpoint-url https://s3.${{ secrets.AWS_REGION }}.amazonaws.com)
          echo "::set-output name=url-apk::$URL"
          
      - name: Post APK URL to Slack
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "Download the APK file version ${{ steps.extract-variable-apk.outputs.custom-variable-apk }}: <${{ steps.get-url-apk.outputs.url-apk }}|Click Here>"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Post Failure Notification to Slack for APK
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "Build failed for APK! Please check the workflow for details."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
