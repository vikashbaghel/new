name: Build Production AAB APK ji

on:
  pull_request:
    branches:
      - main

jobs:
  build_aab:
    name: Build AAB
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('*/.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode Keystore from Base64
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > /home/runner/work/keystore.jks



      - name: Build signed AAB for production
        run: |
          ./gradlew bundleProductionRelease \
            -Pandroid.injected.signing.store.file=/home/runner/work/keystore.jks \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }} 

      - name: Generate Timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M%S')"

      - name: Extract Custom Variable
        id: extract-variable
        run: |
          CUSTOM_VARIABLE=$(awk -F "\"" '/versionName/ {print $2}' app/build.gradle)
          echo "::set-output name=custom-variable::$CUSTOM_VARIABLE"

      - name: Rename AAB with Timestamp
        run: mv ./app/build/outputs/bundle/productionRelease/app-production-release.aab "./app/build/outputs/bundle/productionRelease/app-production-release_${{ steps.extract-variable.outputs.custom-variable }}_${{ steps.timestamp.outputs.timestamp }}.aab"
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Upload AAB to S3
        run: |
          aws s3 cp ./app/build/outputs/bundle/productionRelease/app-production-release_${{ steps.extract-variable.outputs.custom-variable }}_${{ steps.timestamp.outputs.timestamp }}.aab s3://${{ secrets.AWS_S3_BUCKET }}/AAB-PROD/

      - name: Generate Public URL for AAB
        id: get-url
        run: |
          URL=$(aws s3 presign s3://${{ secrets.AWS_S3_BUCKET }}/AAB-PROD/app-production-release_${{ steps.extract-variable.outputs.custom-variable }}_${{ steps.timestamp.outputs.timestamp }}.aab --expires-in 432000 --region ${{ secrets.AWS_REGION }} --endpoint-url https://s3.${{ secrets.AWS_REGION }}.amazonaws.com)
          echo "::set-output name=url::$URL"

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Fetch PR Details
        run: |
          PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq '.body')
          ESCAPED_BODY=$(echo "$PR_BODY" | sed -e 's/\r//g' -e 's/\n/\\n/g' -e 's/"/\\"/g')
          echo "PR_BODY=${ESCAPED_BODY}" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          

      - name: Post AAB URL to Slack1
        run: |
          curl -X POST -H 'Content-Type: application/json' -d "{
            \"text\": \"${PR_BODY}\nDownload the AAB file for production using version ${{ steps.extract-variable.outputs.custom-variable }}: <${{ steps.get-url.outputs.url }}|Click Here>\"
          }" $SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_BODY: ${{ env.PR_BODY }}

      - name: Post Failure Notification to Slack for AAB
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "Build failed for AAB! Please check the workflow for details."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build_apk:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('*/.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode Keystore from Base64
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > /home/runner/work/keystore.jks

      - name: Build APK for release
        run: |
          ./gradlew assembleProductionRelease \
            -Pandroid.injected.signing.store.file=/home/runner/work/keystore.jks \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Generate Timestamp for APK
        id: timestamp-apk
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M%S')"

      - name: Extract Custom Variable for APK
        id: extract-variable-apk
        run: |
          CUSTOM_VARIABLE=$(awk -F "\"" '/versionName/ {print $2}' app/build.gradle)
          echo "::set-output name=custom-variable-apk::$CUSTOM_VARIABLE"
          
      - name: Rename APK with Timestamp
        run: mv ./app/build/outputs/apk/production/release/productionRelease* "./app/build/outputs/apk/production/release/app-production-release_${{ steps.extract-variable-apk.outputs.custom-variable-apk }}_${{ steps.timestamp-apk.outputs.timestamp }}.apk"
    
      - name: Configure AWS Credentials for APK
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Install AWS CLI for APK
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Upload APK to S3
        run: |
          aws s3 cp ./app/build/outputs/apk/production/release/app-production-release_${{ steps.extract-variable-apk.outputs.custom-variable-apk }}_${{ steps.timestamp-apk.outputs.timestamp }}.apk s3://${{ secrets.AWS_S3_BUCKET }}/APK-PROD/

      - name: Generate Public URL for APK
        id: get-url-apk
        run: |
          URL=$(aws s3 presign s3://${{ secrets.AWS_S3_BUCKET }}/APK-PROD/app-production-release_${{ steps.extract-variable-apk.outputs.custom-variable-apk }}_${{ steps.timestamp-apk.outputs.timestamp }}.apk --expires-in 432000 --region ${{ secrets.AWS_REGION }} --endpoint-url https://s3.${{ secrets.AWS_REGION }}.amazonaws.com)
          echo "::set-output name=url-apk::$URL"

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Fetch PR Details
        run: |
          PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq '.body')
          ESCAPED_BODY=$(echo "$PR_BODY" | sed -e 's/\r//g' -e 's/\n/\\n/g' -e 's/"/\\"/g')
          echo "PR_BODY=${ESCAPED_BODY}" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post APK URL to Slack1
        run: |
          curl -X POST -H 'Content-Type: application/json' -d "{
            \"text\": \"${PR_BODY}\nDownload the APK file for production using version ${{ steps.extract-variable-apk.outputs.custom-variable-apk }}: <${{ steps.get-url-apk.outputs.url-apk }}|Click Here>\"
          }" $SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_BODY: ${{ env.PR_BODY }}

      - name: Post Failure Notification to Slack for APK
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "Build failed for APK! Please check the workflow for details."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
